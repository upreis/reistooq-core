/**
 * ðŸ“¥ SERVIÃ‡O DE EXPORTAÃ‡ÃƒO CSV E EXCEL
 * Centraliza lÃ³gica de exportaÃ§Ã£o para evitar duplicaÃ§Ã£o
 */

import { toast } from 'sonner';
import * as XLSX from 'xlsx';

/**
 * Prepara dados completos para exportaÃ§Ã£o
 */
const prepararDadosExportacao = (devolucoes: any[]): { headers: string[], data: any[][] } => {
  const headers = [
    'ID Claim',
    'ID Pedido',
    'Account',
    'Marketplace',
    'SKU',
    'Produto',
    'Quantidade',
    'Valor Retido',
    'Valor Original',
    'Status Claim',
    'Status DevoluÃ§Ã£o',
    'EstÃ¡gio',
    'Tipo Claim',
    'Subtipo Claim',
    'Motivo Categoria',
    'Reason ID',
    'Reason Name',
    'Reason Detail',
    'Data da Venda',
    'Data CriaÃ§Ã£o Claim',
    'Data Fechamento',
    'Ãšltima AtualizaÃ§Ã£o',
    'MÃ©todo ResoluÃ§Ã£o',
    'Resultado Final',
    'ResponsÃ¡vel Custo',
    'NÃºmero Mensagens',
    'Mensagens NÃ£o Lidas',
    'Dias Restantes AÃ§Ã£o',
    'Shipment ID',
    'CÃ³digo Rastreamento',
    'Transportadora',
    'Status Rastreamento',
    'Total Anexos',
    'Em MediaÃ§Ã£o',
    'Escalado ML',
    'NÃ­vel Prioridade',
    'Ã‰ Troca',
    'Comprador Nome',
    'Comprador Nickname',
    'MÃ©todo Pagamento',
    'Parcelas',
    'Tags Pedido',
    'Nota Fiscal',
    'Tem Financeiro',
    'Tem Review',
    'EficiÃªncia ResoluÃ§Ã£o'
  ];

  const data = devolucoes.map(dev => [
    dev.claim_id || '',
    dev.order_id || '',
    dev.account_name || '',
    dev.marketplace_origem || '',
    dev.sku || '',
    dev.produto_titulo || '',
    dev.quantidade || '',
    dev.valor_retido || '',
    dev.valor_original_produto || '',
    dev.claim_status || '',
    dev.status_devolucao || '',
    dev.subtipo_claim || '',
    dev.tipo_claim || '',
    dev.subtipo_claim || '',
    dev.motivo_categoria || '',
    dev.reason_id || '',
    dev.reason_name || '',
    dev.reason_detail || '',
    dev.data_criacao ? formatDateSafe(dev.data_criacao) : '',
    dev.data_criacao_claim ? formatDateSafe(dev.data_criacao_claim) : '',
    dev.data_fechamento_claim ? formatDateSafe(dev.data_fechamento_claim) : '',
    dev.updated_at ? formatDateSafe(dev.updated_at) : '',
    dev.metodo_resolucao || '',
    dev.resultado_final || '',
    dev.responsavel_custo || '',
    dev.numero_interacoes || 0,
    dev.mensagens_nao_lidas || 0,
    dev.dias_restantes_acao || '',
    dev.shipment_id || '',
    dev.codigo_rastreamento || '',
    dev.transportadora || '',
    dev.status_rastreamento || '',
    dev.total_evidencias || 0,
    dev.em_mediacao ? 'Sim' : 'NÃ£o',
    dev.escalado_para_ml ? 'Sim' : 'NÃ£o',
    dev.nivel_prioridade || '',
    dev.eh_troca ? 'Sim' : 'NÃ£o',
    dev.comprador_nome_completo || '',
    dev.comprador_nickname || '',
    dev.metodo_pagamento || '',
    dev.parcelas || '',
    Array.isArray(dev.tags_pedido) ? dev.tags_pedido.join(', ') : '',
    dev.nota_fiscal_autorizada ? 'Sim' : 'NÃ£o',
    dev.tem_financeiro ? 'Sim' : 'NÃ£o',
    dev.tem_review ? 'Sim' : 'NÃ£o',
    dev.eficiencia_resolucao || ''
  ]);

  return { headers, data };
};

/**
 * Exporta devoluÃ§Ãµes para CSV
 */
export const exportarDevolucoes = (devolucoes: any[]): void => {
  if (!devolucoes.length) {
    toast.error('Nenhum dado para exportar');
    return;
  }

  const { headers, data } = prepararDadosExportacao(devolucoes);

  const csvContent = [headers, ...data]
    .map(row => row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(','))
    .join('\n');

  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `devolucoes_ml_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
  
  toast.success(`${devolucoes.length} devoluÃ§Ãµes exportadas para CSV!`);
};

/**
 * Exporta devoluÃ§Ãµes para Excel
 */
export const exportarDevolucoesExcel = (devolucoes: any[]): void => {
  if (!devolucoes.length) {
    toast.error('Nenhum dado para exportar');
    return;
  }

  const { headers, data } = prepararDadosExportacao(devolucoes);

  // Criar workbook e worksheet
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.aoa_to_sheet([headers, ...data]);

  // Configurar larguras das colunas
  const colWidths = headers.map((_, idx) => {
    const maxLength = Math.max(
      headers[idx].length,
      ...data.map(row => String(row[idx] || '').length)
    );
    return { wch: Math.min(maxLength + 2, 50) };
  });
  ws['!cols'] = colWidths;

  // Adicionar worksheet ao workbook
  XLSX.utils.book_append_sheet(wb, ws, 'DevoluÃ§Ãµes');

  // Gerar arquivo Excel
  XLSX.writeFile(wb, `devolucoes_ml_${new Date().toISOString().split('T')[0]}.xlsx`);
  
  toast.success(`${devolucoes.length} devoluÃ§Ãµes exportadas para Excel!`);
};

/**
 * Formata data com tratamento de erro
 */
const formatDateSafe = (dateString: string): string => {
  try {
    return new Date(dateString).toLocaleDateString('pt-BR');
  } catch {
    return dateString;
  }
};
