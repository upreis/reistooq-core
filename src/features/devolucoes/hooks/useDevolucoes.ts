/**
 * üéØ HOOK PRINCIPAL OTIMIZADO DE DEVOLU√á√ïES
 * Vers√£o com performance melhorada e controles avan√ßados
 */

import { useState, useEffect, useCallback, useMemo } from 'react';
import { useDebounce } from '@/hooks/useDebounce';
import { useDevolucoesBusca, DevolucaoBuscaFilters } from './useDevolucoesBusca';
import { applyAllFilters } from '../utils/FilterUtils';
import { 
  loadFiltersFromStorage, 
  saveFiltersToStorage, 
  removeFiltersFromStorage, 
  createCleanFilters,
  createInitialFilters 
} from '../utils/LocalStorageUtils';
import { logger } from '@/utils/logger';
import { toast } from 'sonner';

export interface DevolucaoFilters {
  searchTerm: string;
  status: string;
  periodoDias: number;  // Sempre usa item.date_created
}

export interface DevolucaoAdvancedFilters extends DevolucaoBuscaFilters {
  // üîç BUSCA
  searchTerm: string;
  
  // üìä CONTAS
  contasSelecionadas: string[];
  
  // üìÖ DATAS - Sempre usa item.date_created (coluna "Data Cria√ß√£o")
  periodoDias: number;  // 0 = todas, 7, 15, 30, 60, 90
  
  // üéØ STATUS E CLASSIFICA√á√ÉO
  tipoClaim: string;
  subtipoClaim: string;
  motivoCategoria: string;
  
  // üí∞ FINANCEIRO
  valorRetidoMin: string;
  valorRetidoMax: string;
  tipoReembolso: string;
  responsavelCusto: string;
  
  // üöö RASTREAMENTO
  temRastreamento: string;
  statusRastreamento: string;
  transportadora: string;
  
  // üìé ANEXOS E COMUNICA√á√ÉO
  temAnexos: string;
  mensagensNaoLidasMin: string;
  
  // ‚ö†Ô∏è PRIORIDADE E A√á√ÉO
  nivelPrioridade: string;
  acaoSellerNecessaria: string;
  escaladoParaML: string;
  emMediacao: string;
  
  // ‚è∞ PRAZOS
  prazoVencido: string;
  slaNaoCumprido: string;
  
  // üìà M√âTRICAS
  eficienciaResolucao: string;
  scoreQualidadeMin: string;
  
  // CONTROLE
  buscarEmTempoReal: boolean;
  autoRefreshEnabled: boolean;
  autoRefreshInterval: number;
}

export interface PerformanceSettings {
  enableLazyLoading: boolean;
  chunkSize: number;
  debounceDelay: number;
}

export function useDevolucoes(mlAccounts: any[], selectedAccountId?: string, selectedAccountIds?: string[]) {
  // Estados principais
  const [devolucoes, setDevolucoes] = useState<any[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(25);
  const [showAnalytics, setShowAnalytics] = useState(false);
  
  // üìä Estados de progresso
  const [loadingProgress, setLoadingProgress] = useState({ current: 0, total: 0, percentage: 0 });
  
  // üéØ FILTROS UNIFICADOS COM LOCALSTORAGE
  const [advancedFilters, setAdvancedFilters] = useState<DevolucaoAdvancedFilters>(() => {
    return createInitialFilters(selectedAccountId, selectedAccountIds, mlAccounts);
  });

  // Estados para controle de mudan√ßas pendentes
  const [draftFilters, setDraftFilters] = useState<DevolucaoAdvancedFilters | null>(null);
  const [isApplyingFilters, setIsApplyingFilters] = useState(false);

  // Configura√ß√µes de performance otimizadas (fixas)
  const performanceSettings: PerformanceSettings = {
    enableLazyLoading: false, // Desabilitado para pagina√ß√£o tradicional
    chunkSize: 100, // 100 itens por p√°gina
    debounceDelay: 300 // Delay otimizado para responsividade
  };

  // ‚ö†Ô∏è HOOKS DEVEM SER CHAMADOS SEMPRE NA MESMA ORDEM - MOVER PARA O TOPO
  const busca = useDevolucoesBusca();
  const debouncedSearchTerm = useDebounce(advancedFilters.searchTerm, performanceSettings.debounceDelay);
  
  // ‚úÖ 1.4 - CORRE√á√ÉO: Estados de carregamento - REMOVER loading duplicado
  // const [loading, setLoading] = useState(false); // ‚ùå DELETADO - usar apenas busca.loading
  const [error, setError] = useState<string | null>(null);

  // Auto-refresh DESABILITADO - usu√°rio controla manualmente
  const autoRefresh = {
    isRefreshing: false,
    lastRefresh: null,
    nextRefresh: null,
    retryCount: 0,
    timeUntilRefresh: null,
    manualRefresh: async () => {},
    pauseRefresh: () => {},
    resumeRefresh: () => {}
  };

  // ‚úÖ Filtrar dados localmente usando FilterUtils (fonte √∫nica de verdade)
  const devolucoesFiltradas = useMemo(() => {
    console.log('[useDevolucoes] üîÑ Recalculando devolucoesFiltradas:', {
      devolucoesLength: devolucoes.length,
      filters: advancedFilters,
      debouncedSearchTerm
    });
    
    const resultado = applyAllFilters(devolucoes, advancedFilters, debouncedSearchTerm, {
      logPerformance: import.meta.env.DEV
    });
    
    console.log('[useDevolucoes] ‚úÖ devolucoesFiltradas calculadas:', {
      total: devolucoes.length,
      filtradas: resultado.length
    });
    
    return resultado;
  }, [devolucoes, debouncedSearchTerm, advancedFilters]);

  // Pagina√ß√£o manual (sem lazy loading)

  // Atualizar contas selecionadas quando selectedAccountId mudar SEM buscar automaticamente
  useEffect(() => {
    if (selectedAccountId && advancedFilters.contasSelecionadas[0] !== selectedAccountId) {
      setAdvancedFilters(prev => ({
        ...prev,
        contasSelecionadas: [selectedAccountId]
      }));
    }
  }, [selectedAccountId]);

  // ‚úÖ INICIALIZA√á√ÉO LIMPA - Sem persist√™ncia de datas
  useEffect(() => {
    if (!mlAccounts?.length) return;

    // Configurar contas ativas automaticamente APENAS se n√£o tiver selectedAccountId
    if (!selectedAccountId) {
      const contasAtivas = mlAccounts.filter(acc => acc.is_active);
      if (contasAtivas.length > 0 && advancedFilters.contasSelecionadas.length === 0) {
        setAdvancedFilters(prev => ({
          ...prev,
          contasSelecionadas: contasAtivas.map(acc => acc.id)
        }));
      }
    }
    
    console.log('[useDevolucoes] ‚úÖ Inicializa√ß√£o sem dados persistidos - tela limpa');
  }, [mlAccounts, selectedAccountId]);



  // üîç BUSCAR COM FILTROS - LIMPAR TELA E BUSCAR APENAS DA API ML
  const buscarComFiltros = useCallback(async (filtrosImediatos?: DevolucaoAdvancedFilters) => {
    try {
      setError(null);
      
      // üßπ LIMPAR TELA IMEDIATAMENTE quando usu√°rio clicar "Buscar"
      setDevolucoes([]);
      setLoadingProgress({ current: 0, total: 0, percentage: 0 });
      
      // Usar filtros passados diretamente ou os do estado atual
      const filtrosParaUsar = filtrosImediatos || advancedFilters;
      
      logger.info('[useDevolucoes] üåê Limpando tela e buscando APENAS da API ML...', {
        periodoDias: filtrosParaUsar.periodoDias || 0,
        contas: filtrosParaUsar.contasSelecionadas
      });
      
      toast.info('Buscando dados novos da API ML...');
      
      // ‚úÖ Buscar APENAS da API ML (n√£o do banco)
      const dadosAPI = await busca.buscarDaAPI(filtrosParaUsar, mlAccounts);
      
      console.log('[useDevolucoes] üîç DEBUG - Dados retornados da API:', {
        length: dadosAPI?.length || 0,
        isArray: Array.isArray(dadosAPI),
        firstItem: dadosAPI?.[0]?.order_id,
        primeiroObjeto: dadosAPI?.[0],
        temDataCriacao: dadosAPI?.[0]?.data_criacao ? 'SIM' : 'N√ÉO'
      });
      
      setDevolucoes(dadosAPI);
      setCurrentPage(1);
      
      logger.info(`[useDevolucoes] ‚úÖ ${dadosAPI.length} devolu√ß√µes atualizadas da API`);
      toast.success(`${dadosAPI.length} devolu√ß√µes encontradas!`);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Erro ao buscar devolu√ß√µes';
      setError(errorMessage);
      logger.error('[useDevolucoes] ‚ùå Erro ao buscar com filtros:', err);
      toast.error('Erro ao buscar devolu√ß√µes');
    }
  }, [busca, advancedFilters, mlAccounts]);

  // Remover sincroniza√ß√£o autom√°tica com banco
  // const sincronizarDevolucoes = ...

  // ‚úÖ BUSCA AUTOM√ÅTICA INICIAL quando contas s√£o selecionadas
  useEffect(() => {
    const contasValidas = advancedFilters.contasSelecionadas.filter(Boolean);
    
    if (contasValidas.length > 0 && devolucoes.length === 0 && !busca.loading) {
      logger.info('[useDevolucoes] üöÄ Busca autom√°tica inicial - contas selecionadas:', contasValidas);
      buscarComFiltros();
    } else {
      logger.info('[useDevolucoes] ‚è∏Ô∏è Aguardando condi√ß√µes para busca:', {
        temContas: contasValidas.length > 0,
        semDados: devolucoes.length === 0,
        naoCarregando: !busca.loading
      });
    }
  }, [advancedFilters.contasSelecionadas, mlAccounts]);

  // üîÑ Atualizar contas selecionadas quando selectedAccountIds mudar
  useEffect(() => {
    if (selectedAccountIds && selectedAccountIds.length > 0) {
      setAdvancedFilters(prev => ({
        ...prev,
        contasSelecionadas: selectedAccountIds
      }));
    }
  }, [selectedAccountIds]);

  // ‚úèÔ∏è ATUALIZAR DRAFT DE FILTROS (mudan√ßas pendentes)
  const updateDraftFilters = useCallback((key: string, value: any) => {
    setDraftFilters(prev => ({
      ...(prev || advancedFilters),
      [key]: value
    }));
  }, [advancedFilters]);

  // ‚úèÔ∏è APLICAR FILTROS E SALVAR
  const applyFilters = useCallback(async () => {
    setIsApplyingFilters(true);
    try {
      const filtrosParaAplicar = draftFilters || advancedFilters;
      
      // Atualizar estado de filtros aplicados
      setAdvancedFilters(filtrosParaAplicar);
      setDraftFilters(null);
      
      // Salvar no localStorage
      saveFiltersToStorage(filtrosParaAplicar);
      
      // Buscar com os filtros
      await buscarComFiltros(filtrosParaAplicar);
      
      return true;
    } catch (error) {
      console.error('Erro ao aplicar filtros:', error);
      throw error;
    } finally {
      setIsApplyingFilters(false);
    }
  }, [advancedFilters, draftFilters, buscarComFiltros]);

  // ‚úèÔ∏è CANCELAR MUDAN√áAS PENDENTES
  const cancelDraftFilters = useCallback(() => {
    setDraftFilters(null);
  }, []);

  // ‚úèÔ∏è COMPATIBILIDADE: Manter updateAdvancedFilters para c√≥digo legado
  const updateAdvancedFilters = useCallback((newFilters: Partial<DevolucaoAdvancedFilters>) => {
    setAdvancedFilters(prev => {
      const filtrosAtualizados = { ...prev, ...newFilters };
      console.log('[useDevolucoes] ‚úèÔ∏è Filtros atualizados (apenas em mem√≥ria):', filtrosAtualizados);
      return filtrosAtualizados;
    });
  }, []);

  // Atualizar configura√ß√µes de performance removido - valores fixos otimizados

  // üóëÔ∏è LIMPAR FILTROS - Resetar tudo e limpar tela
  const clearFilters = useCallback(() => {
    const filtrosLimpos = createCleanFilters(mlAccounts);
    
    setAdvancedFilters(filtrosLimpos);
    setDraftFilters(null);
    setDevolucoes([]); // üßπ Limpar dados da tela
    setCurrentPage(1);
    
    // Limpar do localStorage
    removeFiltersFromStorage();
    
    toast.info('Filtros limpos. Use "Buscar" para carregar novos dados.');
    console.log('[useDevolucoes] üóëÔ∏è Filtros e dados limpos - tela vazia');
  }, [mlAccounts]);

  // Pagina√ß√£o otimizada
  const totalPages = Math.ceil(devolucoesFiltradas.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  
  // Pagina√ß√£o tradicional
  const devolucoesPaginadas = devolucoesFiltradas.slice(startIndex, startIndex + itemsPerPage);
  
  // Handler para mudan√ßa de itens por p√°gina
  const handleItemsPerPageChange = useCallback((newItemsPerPage: number) => {
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1); // Reset para primeira p√°gina
  }, []);

  // Estat√≠sticas otimizadas
  const stats = useMemo(() => ({
    total: devolucoesFiltradas.length,
    pendentes: devolucoesFiltradas.filter(d => d.status_devolucao === 'with_claims').length,
    concluidas: devolucoesFiltradas.filter(d => d.status_devolucao === 'completed').length,
    canceladas: devolucoesFiltradas.filter(d => d.status_devolucao === 'cancelled').length,
    // Performance stats
    totalLoaded: devolucoes.length,
    filtered: devolucoesFiltradas.length,
    visible: devolucoesPaginadas.length
  }), [devolucoesFiltradas, devolucoes.length, devolucoesPaginadas.length]);

  // Toggle analytics
  const toggleAnalytics = useCallback(() => {
    setShowAnalytics(prev => !prev);
  }, []);

  // üõë Cancelar busca em andamento
  const cancelarBusca = useCallback(() => {
    busca.cancelarBusca();
    setDevolucoes([]);
    setIsApplyingFilters(false);
    toast.info('Busca cancelada');
  }, [busca]);

  return {
    // Dados
    devolucoes: devolucoesPaginadas,
    devolucoesFiltradas,
    devolucoesPaginadas,
    stats,
    
    // Estados
    loading: busca.loading, // ‚úÖ 1.4 - CORRE√á√ÉO: Fonte √∫nica de verdade
    loadingProgress, // üìä Progresso de carregamento
    isRefreshing: false,
    error: error,
    currentPage,
    totalPages,
    itemsPerPage,
    showAnalytics,
    
    // Filtros unificados
    filters: advancedFilters, // Compatibilidade
    advancedFilters,
    draftFilters,
    isApplyingFilters,
    hasPendingChanges: draftFilters !== null,
    performanceSettings,
    
    // A√ß√µes de filtros
    updateFilters: updateAdvancedFilters, // Compatibilidade  
    updateAdvancedFilters,
    updateDraftFilters,
    applyFilters,
    cancelDraftFilters,
    clearFilters,
    
    // A√ß√µes (somente API)
    buscarComFiltros,
    cancelarBusca,
    setCurrentPage,
    setItemsPerPage: handleItemsPerPageChange,
    toggleAnalytics,
    clearError: () => setError(null),
    
    // Performance & Auto-refresh
    autoRefresh,
    
    // üéØ Cache stats apenas (loadingProgress j√° foi exportado acima)
    cacheStats: busca.cacheStats,
    clearCache: busca.clearCache
  };
}