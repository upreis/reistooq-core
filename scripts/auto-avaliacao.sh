#!/bin/bash

# üõ°Ô∏è SISTEMA DE AUTO-AVALIA√á√ÉO REISTOQ
# Valida mudan√ßas antes e depois da implementa√ß√£o

set -e

echo "üîç INICIANDO AUTO-AVALIA√á√ÉO DO SISTEMA..."

# ===== VERIFICA√á√ïES PR√â-IMPLEMENTA√á√ÉO =====

echo ""
echo "üìã FASE 1: VERIFICA√á√ïES PR√â-IMPLEMENTA√á√ÉO"

# 1. Verificar Routers duplicados
echo "üîç Verificando Routers duplicados..."

# Verificar imports de BrowserRouter (deve ter apenas 1 em main.tsx)
BROWSER_ROUTER_FILES=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -l "BrowserRouter")
BROWSER_ROUTER_COUNT=$(echo "$BROWSER_ROUTER_FILES" | grep -v "^$" | wc -l)

echo "üìç Arquivos com BrowserRouter:"
echo "$BROWSER_ROUTER_FILES"

if [ "$BROWSER_ROUTER_COUNT" -gt 1 ]; then
    echo "‚ùå ERRO CR√çTICO: $BROWSER_ROUTER_COUNT arquivos com BrowserRouter! M√°ximo permitido: 1 (main.tsx)"
    exit 1
elif [ "$BROWSER_ROUTER_COUNT" -eq 1 ]; then
    if echo "$BROWSER_ROUTER_FILES" | grep -q "main.tsx"; then
        echo "‚úÖ BrowserRouter apenas em main.tsx (correto)"
    else
        echo "‚ùå ERRO: BrowserRouter n√£o est√° em main.tsx"
        exit 1
    fi
else
    echo "‚ùå ERRO: Nenhum BrowserRouter encontrado"
    exit 1
fi

# 2. Verificar hooks condicionais
echo "üîç Verificando hooks condicionais..."
CONDITIONAL_HOOKS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "if.*use[A-Z]" | wc -l)
if [ "$CONDITIONAL_HOOKS" -gt 0 ]; then
    echo "‚ö†Ô∏è AVISO: $CONDITIONAL_HOOKS hooks condicionais encontrados"
    find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "if.*use[A-Z]"
else
    echo "‚úÖ Hooks sem condicionais"
fi

# 3. Verificar exports duplicados
echo "üîç Verificando exports duplicados..."
DUPLICATE_EXPORTS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -l "export default" | while read file; do
    count=$(grep -c "export default" "$file")
    if [ "$count" -gt 1 ]; then
        echo "$file: $count exports"
    fi
done | wc -l)

if [ "$DUPLICATE_EXPORTS" -gt 0 ]; then
    echo "‚ùå ERRO: Exports duplicados encontrados"
    find src -name "*.tsx" -o -name "*.ts" | xargs grep -l "export default" | while read file; do
        count=$(grep -c "export default" "$file")
        if [ "$count" -gt 1 ]; then
            echo "üìç $file: $count exports"
        fi
    done
    exit 1
else
    echo "‚úÖ Exports √∫nicos confirmados"
fi

# 4. Verificar imports circulares b√°sicos
echo "üîç Verificando imports circulares..."
CIRCULAR_IMPORTS=$(find src -name "*.tsx" -o -name "*.ts" | while read file; do
    imports=$(grep -o "from ['\"].*['\"]" "$file" | sed "s/from ['\"]//g" | sed "s/['\"]//g" | grep "^\./" | wc -l)
    if [ "$imports" -gt 10 ]; then
        echo "$file: $imports imports relativos"
    fi
done | wc -l)

if [ "$CIRCULAR_IMPORTS" -gt 0 ]; then
    echo "‚ö†Ô∏è AVISO: Poss√≠veis imports circulares detectados"
else
    echo "‚úÖ Imports aparentemente corretos"
fi

# ===== VERIFICA√á√ïES DE SEGURAN√áA =====

echo ""
echo "üîí FASE 2: VERIFICA√á√ïES DE SEGURAN√áA"

# 5. Verificar uso de dados sens√≠veis
echo "üîç Verificando acesso a dados sens√≠veis..."
SENSITIVE_ACCESS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "from.*profiles\|from.*historico_vendas\|from.*integration_secrets" | wc -l)
if [ "$SENSITIVE_ACCESS" -gt 0 ]; then
    echo "‚ö†Ô∏è AVISO: $SENSITIVE_ACCESS acessos diretos a tabelas sens√≠veis encontrados"
    find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "from.*profiles\|from.*historico_vendas\|from.*integration_secrets"
    echo "üí° Use get_profiles_safe(), get_historico_vendas_masked() ao inv√©s de acesso direto"
else
    echo "‚úÖ Acesso a dados sens√≠veis seguro"
fi

# 6. Verificar logs com dados sens√≠veis
echo "üîç Verificando logs com dados sens√≠veis..."
SENSITIVE_LOGS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "console\.log.*password\|console\.log.*secret\|console\.log.*token\|console\.log.*key" | wc -l)
if [ "$SENSITIVE_LOGS" -gt 0 ]; then
    echo "‚ùå ERRO DE SEGURAN√áA: $SENSITIVE_LOGS logs com dados sens√≠veis"
    find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "console\.log.*password\|console\.log.*secret\|console\.log.*token\|console\.log.*key"
    exit 1
else
    echo "‚úÖ Logs sem dados sens√≠veis"
fi

# ===== VERIFICA√á√ïES DE QUALIDADE =====

echo ""
echo "üìä FASE 3: VERIFICA√á√ïES DE QUALIDADE"

# 7. Verificar TODOs antigos
echo "üîç Verificando TODOs antigos..."
TODO_COUNT=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "TODO\|FIXME\|XXX" | wc -l)
if [ "$TODO_COUNT" -gt 20 ]; then
    echo "‚ö†Ô∏è AVISO: $TODO_COUNT TODOs encontrados - considere limpeza"
else
    echo "‚úÖ TODOs em quantidade aceit√°vel: $TODO_COUNT"
fi

# 8. Verificar any excessivo no TypeScript
echo "üîç Verificando uso de 'any' no TypeScript..."
ANY_COUNT=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n ": any\|<any>" | wc -l)
if [ "$ANY_COUNT" -gt 10 ]; then
    echo "‚ö†Ô∏è AVISO: $ANY_COUNT usos de 'any' - considere tipagem espec√≠fica"
    echo "üìç Locais:"
    find src -name "*.tsx" -o -name "*.ts" | xargs grep -n ": any\|<any>" | head -5
else
    echo "‚úÖ Uso de 'any' controlado: $ANY_COUNT"
fi

# ===== VERIFICA√á√ïES DE PERFORMANCE =====

echo ""
echo "‚ö° FASE 4: VERIFICA√á√ïES DE PERFORMANCE"

# 9. Verificar imports pesados
echo "üîç Verificando imports pesados..."
HEAVY_IMPORTS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "import.*\*.*from\|import.*{.*{.*}.*}.*from" | wc -l)
if [ "$HEAVY_IMPORTS" -gt 5 ]; then
    echo "‚ö†Ô∏è AVISO: $HEAVY_IMPORTS imports pesados encontrados"
    echo "üí° Considere tree shaking ou imports espec√≠ficos"
else
    echo "‚úÖ Imports otimizados"
fi

# 10. Verificar re-renders desnecess√°rios
echo "üîç Verificando poss√≠veis re-renders desnecess√°rios..."
RERENDER_RISKS=$(find src -name "*.tsx" -o -name "*.ts" | xargs grep -n "onClick.*=>.*{}\|onChange.*=>.*{}" | wc -l)
if [ "$RERENDER_RISKS" -gt 10 ]; then
    echo "‚ö†Ô∏è AVISO: $RERENDER_RISKS fun√ß√µes inline encontradas"
    echo "üí° Considere useCallback para otimiza√ß√£o"
else
    echo "‚úÖ Fun√ß√µes otimizadas"
fi

# ===== RELAT√ìRIO FINAL =====

echo ""
echo "üìã RELAT√ìRIO FINAL DA AUTO-AVALIA√á√ÉO"
echo "=================================="

# Status geral
if [ "$ROUTER_COUNT" -le 1 ] && [ "$DUPLICATE_EXPORTS" -eq 0 ] && [ "$SENSITIVE_LOGS" -eq 0 ]; then
    echo "‚úÖ STATUS GERAL: APROVADO PARA IMPLEMENTA√á√ÉO"
    echo ""
    echo "üéØ RESUMO:"
    echo "   ‚Ä¢ Router √∫nico: ‚úÖ"
    echo "   ‚Ä¢ Exports √∫nicos: ‚úÖ"
    echo "   ‚Ä¢ Seguran√ßa: ‚úÖ"
    echo "   ‚Ä¢ Hooks condicionais: $CONDITIONAL_HOOKS"
    echo "   ‚Ä¢ TODOs: $TODO_COUNT"
    echo "   ‚Ä¢ Uso de 'any': $ANY_COUNT"
    echo ""
    echo "üí° PR√ìXIMOS PASSOS:"
    echo "   1. Implementar mudan√ßas planejadas"
    echo "   2. Executar testes unit√°rios"
    echo "   3. Executar auto-avalia√ß√£o p√≥s-implementa√ß√£o"
    echo "   4. Deploy ap√≥s valida√ß√£o completa"
else
    echo "‚ùå STATUS GERAL: BLOQUEADO - CORRIGIR ERROS CR√çTICOS"
    echo ""
    echo "üö® ERROS CR√çTICOS A CORRIGIR:"
    [ "$ROUTER_COUNT" -gt 1 ] && echo "   ‚Ä¢ Routers duplicados: $ROUTER_COUNT"
    [ "$DUPLICATE_EXPORTS" -gt 0 ] && echo "   ‚Ä¢ Exports duplicados: $DUPLICATE_EXPORTS"
    [ "$SENSITIVE_LOGS" -gt 0 ] && echo "   ‚Ä¢ Logs com dados sens√≠veis: $SENSITIVE_LOGS"
    echo ""
    echo "üõë N√ÉO PROSSIGA AT√â CORRIGIR TODOS OS ERROS CR√çTICOS"
    exit 1
fi

echo ""
echo "üõ°Ô∏è Auto-avalia√ß√£o conclu√≠da com sucesso!"
echo "üìÖ Executado em: $(date)"
echo "üîÑ Pr√≥xima avalia√ß√£o recomendada ap√≥s pr√≥xima mudan√ßa significativa"